#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Cross-platform $TIMEOUT_CMD command
if command -v gtimeout > /dev/null 2>&1; then
  TIMEOUT_CMD="gtimeout"
elif command -v timeout > /dev/null 2>&1; then
  TIMEOUT_CMD="timeout"
else
  TIMEOUT_CMD=""
fi

# Pre-commit hook: Run linting, formatting, tests, and optional AI review
# Part of InformUp Engineering Automation System (Agent-Based)
# Version: 2.0.0

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "üîç Running pre-commit checks..."

# Load config if it exists
CONFIG_FILE=".claude-automation-config.json"
if [ -f "$CONFIG_FILE" ]; then
  PRE_COMMIT_ENABLED=$(node -p "try { require('./$CONFIG_FILE').triggers.preCommitReview.enabled } catch(e) { 'true' }")
  QUICK_MODE=$(node -p "try { require('./$CONFIG_FILE').triggers.preCommitReview.quick } catch(e) { 'true' }")
  FAIL_ON_ISSUES=$(node -p "try { require('./$CONFIG_FILE').triggers.preCommitReview.failOnIssues } catch(e) { 'false' }")
else
  PRE_COMMIT_ENABLED="true"
  QUICK_MODE="true"
  FAIL_ON_ISSUES="false"
fi

# Exit codes
EXIT_CODE=0

# 1. Run linter
echo "  üìã Linting code..."
if npm run lint --if-present > /dev/null 2>&1; then
  echo "  ${GREEN}‚úì${NC} Linter passed"
else
  echo "  ${RED}‚úó${NC} Linter failed"
  echo "  ${YELLOW}Run 'npm run lint' to see errors${NC}"
  EXIT_CODE=1
fi

# 2. Run formatter check
echo "  üíÖ Checking formatting..."
if npm run format:check --if-present > /dev/null 2>&1; then
  echo "  ${GREEN}‚úì${NC} Formatting OK"
elif npm run format --if-present > /dev/null 2>&1; then
  echo "  ${YELLOW}‚ö†${NC} Auto-formatted files"
  git add -u
else
  echo "  ${YELLOW}‚ö†${NC} No formatter configured"
fi

# 3. Run tests
echo "  üß™ Running tests..."
if npm test -- --passWithNoTests --bail > /dev/null 2>&1; then
  echo "  ${GREEN}‚úì${NC} Tests passed"
else
  echo "  ${RED}‚úó${NC} Tests failed"
  echo "  ${YELLOW}Run 'npm test' to see failures${NC}"

  # Offer AI assistance for test failures (if enabled)
  if [ "$PRE_COMMIT_ENABLED" = "true" ] && command -v claude > /dev/null 2>&1; then
    echo "  ${YELLOW}üí° Run 'claude code' to diagnose test failures${NC}"
  fi

  EXIT_CODE=1
fi

# 4. Run type check (if TypeScript)
if [ -f "tsconfig.json" ]; then
  echo "  üìò Type checking..."
  if npm run type-check --if-present > /dev/null 2>&1; then
    echo "  ${GREEN}‚úì${NC} Type check passed"
  else
    echo "  ${RED}‚úó${NC} Type check failed"
    echo "  ${YELLOW}Run 'npm run type-check' to see errors${NC}"
    EXIT_CODE=1
  fi
fi

# 5. Quick AI code review (if enabled and Claude is available)
if [ "$PRE_COMMIT_ENABLED" = "true" ] && command -v claude > /dev/null 2>&1; then
  echo "  ü§ñ Quick AI review..."

  # Get staged files
  STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(js|jsx|ts|tsx)$' || true)

  if [ -n "$STAGED_FILES" ]; then
    # Invoke Code Reviewer Agent with $TIMEOUT_CMD (30 seconds for quick mode)
    if $TIMEOUT_CMD 30s claude code --agent code-reviewer 2>/dev/null; then
      echo "  ${GREEN}‚úì${NC} AI review passed"
    else
      REVIEW_EXIT=$?
      if [ $REVIEW_EXIT -eq 124 ]; then
        # Timeout occurred
        echo "  ${YELLOW}‚ö†${NC} AI review timed out (proceeding)"
      elif [ "$FAIL_ON_ISSUES" = "true" ]; then
        echo "  ${RED}‚úó${NC} AI review found critical issues"
        EXIT_CODE=1
      else
        echo "  ${YELLOW}‚ö†${NC} AI review found suggestions"
      fi
    fi
  else
    echo "  ${YELLOW}‚Ñπ${NC} No code files to review"
  fi
elif [ "$PRE_COMMIT_ENABLED" = "true" ]; then
  echo "  ${YELLOW}‚ö†${NC} Claude Code not installed (skipping AI review)"
  echo "  ${YELLOW}Install: npm install -g @anthropic/claude-code${NC}"
fi

# Summary
echo ""
if [ $EXIT_CODE -eq 0 ]; then
  echo "${GREEN}‚úÖ All pre-commit checks passed${NC}"
else
  echo "${RED}‚ùå Some pre-commit checks failed${NC}"
  echo ""
  echo "To skip hooks (not recommended):"
  echo "  git commit --no-verify -m \"your message\""
  echo ""
fi

exit $EXIT_CODE
