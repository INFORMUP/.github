#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Pre-push hook: Run full local CI checks and generate PR description
# Part of InformUp Engineering Automation System
# Version: 1.0.0

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo "üöÄ Running pre-push checks..."

# Load config
CONFIG_FILE=".claude-automation-config.json"
if [ -f "$CONFIG_FILE" ]; then
  PRE_PUSH_ENABLED=$(node -p "try { require('./$CONFIG_FILE').triggers.prePushChecks.enabled } catch(e) { 'true' }")
  PR_GEN_ENABLED=$(node -p "try { require('./$CONFIG_FILE').triggers.prGeneration.enabled } catch(e) { 'true' }")
else
  PRE_PUSH_ENABLED="true"
  PR_GEN_ENABLED="true"
fi

EXIT_CODE=0

# Get current branch
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

# Check if we're pushing to a feature branch
IS_FEATURE_BRANCH=false
if echo "$CURRENT_BRANCH" | grep -q "^feature/\|^fix/\|^refactor/"; then
  IS_FEATURE_BRANCH=true
fi

echo "  üìç Branch: $CURRENT_BRANCH"

# 1. Run full test suite with coverage
echo ""
echo "  üß™ Running full test suite..."
if npm test -- --coverage > /dev/null 2>&1; then
  echo "  ${GREEN}‚úì${NC} All tests passed"

  # Check coverage threshold
  if [ -f "coverage/coverage-summary.json" ]; then
    COVERAGE=$(node -p "try { Math.round(require('./coverage/coverage-summary.json').total.lines.pct) } catch(e) { '0' }")
    THRESHOLD=$(node -p "try { require('./$CONFIG_FILE').testing.coverageThreshold } catch(e) { '80' }")

    if [ "$COVERAGE" -ge "$THRESHOLD" ]; then
      echo "  ${GREEN}‚úì${NC} Coverage: $COVERAGE% (threshold: $THRESHOLD%)"
    else
      echo "  ${YELLOW}‚ö†${NC} Coverage: $COVERAGE% (below threshold: $THRESHOLD%)"
      echo "  ${YELLOW}Consider adding more tests${NC}"
    fi
  fi
else
  echo "  ${RED}‚úó${NC} Tests failed"
  echo "  ${YELLOW}Run 'npm test' to see failures${NC}"
  EXIT_CODE=1
fi

# 2. Run build
echo ""
echo "  üî® Building project..."
if npm run build --if-present > /dev/null 2>&1; then
  echo "  ${GREEN}‚úì${NC} Build successful"

  # Check build size (if configured)
  if [ -d "build" ] || [ -d "dist" ]; then
    BUILD_DIR=$([ -d "build" ] && echo "build" || echo "dist")
    BUILD_SIZE=$(du -sk $BUILD_DIR 2>/dev/null | cut -f1 || echo "0")
    SIZE_LIMIT=$(node -p "try { require('./$CONFIG_FILE').build.sizeLimitMB * 1024 } catch(e) { '5120' }")

    if [ "$BUILD_SIZE" -le "$SIZE_LIMIT" ]; then
      echo "  ${GREEN}‚úì${NC} Build size: ${BUILD_SIZE}KB (limit: ${SIZE_LIMIT}KB)"
    else
      echo "  ${YELLOW}‚ö†${NC} Build size: ${BUILD_SIZE}KB exceeds limit: ${SIZE_LIMIT}KB"
    fi
  fi
else
  echo "  ${YELLOW}‚ö†${NC} No build script found or build failed"
fi

# 3. Run local CI script (if exists)
if [ -f "scripts/automation/local-ci.js" ]; then
  echo ""
  echo "  üîç Running local CI checks..."
  if node scripts/automation/local-ci.js; then
    echo "  ${GREEN}‚úì${NC} Local CI passed"
  else
    echo "  ${RED}‚úó${NC} Local CI failed"
    EXIT_CODE=1
  fi
fi

# 4. AI-powered checks (if enabled and available)
if [ "$PRE_PUSH_ENABLED" = "true" ] && command -v claude > /dev/null 2>&1; then
  echo ""
  echo "  ü§ñ Running AI-powered reviews..."

  # Quick security check
  echo "    üîí Security review..."
  # This would call a script that uses Claude for security review
  # For now, just a placeholder

  # Quick architecture check
  echo "    üèóÔ∏è  Architecture review..."
  # This would call a script that uses Claude for architecture review
  # For now, just a placeholder

  echo "  ${GREEN}‚úì${NC} AI reviews completed"
fi

# 5. Generate PR description (if feature branch and Claude available)
if [ "$IS_FEATURE_BRANCH" = "true" ] && [ "$PR_GEN_ENABLED" = "true" ] && command -v claude > /dev/null 2>&1; then
  echo ""
  echo "  üìù PR description ready to generate"
  echo "  ${BLUE}After pushing, run:${NC}"
  echo "  ${BLUE}  node scripts/automation/pr-generator.js --interactive${NC}"
  echo "  ${BLUE}  or: gh pr create${NC}"
fi

# Summary
echo ""
if [ $EXIT_CODE -eq 0 ]; then
  echo "${GREEN}‚úÖ All pre-push checks passed - ready to push!${NC}"
else
  echo "${RED}‚ùå Some pre-push checks failed${NC}"
  echo ""
  echo "Fix the issues above or skip with:"
  echo "  git push --no-verify"
  echo ""
fi

exit $EXIT_CODE
