#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Cross-platform $TIMEOUT_CMD command
if command -v gtimeout > /dev/null 2>&1; then
  TIMEOUT_CMD="gtimeout"
elif command -v timeout > /dev/null 2>&1; then
  TIMEOUT_CMD="timeout"
else
  TIMEOUT_CMD=""
fi

# Pre-push hook: Run full local CI checks and generate PR description
# Part of InformUp Engineering Automation System (Agent-Based)
# Version: 2.0.0

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo "üöÄ Running pre-push checks..."

# Load config
CONFIG_FILE=".claude-automation-config.json"
if [ -f "$CONFIG_FILE" ]; then
  PRE_PUSH_ENABLED=$(node -p "try { require('./$CONFIG_FILE').triggers.prePushChecks.enabled } catch(e) { 'true' }")
  PR_GEN_ENABLED=$(node -p "try { require('./$CONFIG_FILE').triggers.prGeneration.enabled } catch(e) { 'true' }")
else
  PRE_PUSH_ENABLED="true"
  PR_GEN_ENABLED="true"
fi

EXIT_CODE=0

# Get current branch
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

# Check if we're pushing to a feature branch
IS_FEATURE_BRANCH=false
if echo "$CURRENT_BRANCH" | grep -q "^feature/\|^fix/\|^refactor/"; then
  IS_FEATURE_BRANCH=true
fi

echo "  üìç Branch: $CURRENT_BRANCH"

# 1. Run Local CI Agent (comprehensive checks)
if [ "$PRE_PUSH_ENABLED" = "true" ] && command -v claude > /dev/null 2>&1; then
  echo ""
  echo "  üöÄ Running Local CI Agent..."
  echo "     This may take a few minutes..."
  echo ""

  # Invoke Local CI Agent with $TIMEOUT_CMD (5 minutes)
  if $TIMEOUT_CMD 300s claude --agent local-ci; then
    echo ""
    echo "  ${GREEN}‚úì${NC} Local CI passed"
  else
    CI_EXIT=$?
    echo ""
    if [ $CI_EXIT -eq 124 ]; then
      echo "  ${YELLOW}‚ö†${NC} Local CI timed out after 5 minutes"
      echo "  ${YELLOW}Consider optimizing your test suite${NC}"
    else
      echo "  ${RED}‚úó${NC} Local CI failed"
      echo "  ${YELLOW}Review the output above for details${NC}"
      EXIT_CODE=1
    fi
  fi
elif [ "$PRE_PUSH_ENABLED" = "true" ]; then
  # Fallback to basic checks if Claude not available
  echo ""
  echo "  üß™ Running basic checks (Claude not available)..."

  # Run tests
  if npm test -- --coverage > /dev/null 2>&1; then
    echo "  ${GREEN}‚úì${NC} Tests passed"
  else
    echo "  ${RED}‚úó${NC} Tests failed"
    EXIT_CODE=1
  fi

  # Run build
  if npm run build --if-present > /dev/null 2>&1; then
    echo "  ${GREEN}‚úì${NC} Build successful"
  else
    echo "  ${YELLOW}‚ö†${NC} Build failed"
  fi
fi

# 2. Generate PR description (if feature branch and Claude available)
if [ "$IS_FEATURE_BRANCH" = "true" ] && [ "$PR_GEN_ENABLED" = "true" ] && command -v claude > /dev/null 2>&1 ] && [ $EXIT_CODE -eq 0 ]; then
  echo ""
  echo "  üìù Would you like to generate a PR description? (y/n)"
  read -t 10 GEN_PR || GEN_PR="n"

  if [ "$GEN_PR" = "y" ]; then
    echo ""
    echo "  ü§ñ Generating PR description..."

    # Invoke PR Generator Agent
    claude --agent pr-generator

    echo ""
    echo "  ${GREEN}‚úì${NC} PR description generated"
    echo "  ${BLUE}You can now:${NC}"
    echo "  ${BLUE}  - Push with: git push${NC}"
    echo "  ${BLUE}  - Create PR with: gh pr create${NC}"
  else
    echo ""
    echo "  ${YELLOW}‚è≠${NC}  Skipping PR generation"
    echo "  ${BLUE}Generate later with:${NC} claude --agent pr-generator"
  fi
fi

# Summary
echo ""
if [ $EXIT_CODE -eq 0 ]; then
  echo "${GREEN}‚úÖ All pre-push checks passed - ready to push!${NC}"
else
  echo "${RED}‚ùå Some pre-push checks failed${NC}"
  echo ""
  echo "Fix the issues above or skip with:"
  echo "  git push --no-verify"
  echo ""
fi

exit $EXIT_CODE
